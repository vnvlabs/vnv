### MACRO TO BUILD THE REGISTRATION CPP FILE DYNAMICALLY
option(WITH_EXTRACTION "Use extraction to generate Registration files" ON)
set(VNV_OUT_DIR "${CMAKE_BINARY_DIR}/registration" CACHE PATH "Output Directory for Registration files")
set(VNV_OUT_PREFIX "Registration" CACHE STRING "VNV Registration file prefix")
set(VNV_OUT_EXT "c" CACHE STRING "VNV Registration Ouput file extension" )
set(VNV_COMPILE_COMMANDS "${CMAKE_BINARY_DIR}/compile_commands.json" CACHE FILEPATH "Compile Commands file")
set(VNV_DIST_PATH "${CMAKE_SOURCE_DIR}/registration/" CACHE PATH "Directory to save registraiton cache files to")

set(VNV_C_COMPILER @CMAKE_C_COMPILER@)
set(VNV_C_COMPILER_VERSION @CMAKE_C_COMPILER_VERSION@)
set(VNV_CXX_COMPILER @CMAKE_CXX_COMPILER@)
set(VNV_CXX_COMPILER_VERSION @CMAKE_CXX_COMPILER_VERSION@)
set(VNV_MPI_C_COMPILER @MPI_C_COMPILER@)
set(VNV_MPI_C_VERSION @MPI_C_VERSION@)
set(VNV_MPI_CXX_COMPILER @MPI_CXX_COMPILER@)
set(VNV_MPI_CXX_VERSION @MPI_CXX_VERSION@)


if(WITH_EXTRACTION AND TARGET Injection::Extraction)


function( add_vnv_generation_target packageName filename cacheFileName) 
    
   set(depfiles ${cacheFileName} ${filename} ${ARGN})         
   
   if (${ARGC} GREATER 3 ) 
      set(fortranFiles --fortran ${ARGN})
   endif()

   add_custom_target(
        vnv_gen_${packageName}
        COMMAND Injection::Extraction 
               --output ${filename} 
               --cache ${cacheFileName} 
               --package ${packageName} 
               ${fortranFiles}
               ${CMAKE_BINARY_DIR}/compile_commands.json
               
        BYPRODUCTS ${depfiles}       
   )
   
   add_custom_target(
        vnv_force_${packageName}
        COMMAND Injection::Extraction 
               --output ${filename} 
               --cache ${cacheFileName} 
               --force 
               --package ${packageName} 
               ${fortranFiles}
               {CMAKE_BINARY_DIR}/compile_commands.json
          BYPRODUCTS ${depfiles}
               )
   
   add_custom_target(
        vnv_reset_${packageName}
        COMMAND Injection::Extraction 
               --output ${filename}
               --cache ${cacheFileName} 
               --reset 
               ${fortranFiles}
               --package ${packageName} 
               {CMAKE_BINARY_DIR}/compile_commands.json
          BYPRODUCTS ${depfiles}
               )

   add_custom_target(
        vnv_reset_force_${packageName}
        COMMAND Injection::Extraction 
               --output ${filename} 
               --cache ${cacheFileName} 
               --force 
               --reset
               ${fortranFiles}
               --package ${packageName} 
               {CMAKE_BINARY_DIR}/compile_commands.json
          BYPRODUCTS ${depfiles}
   )
      
endfunction()


# This one adds all the targets but makes it up to you 
function(link_vnv_file_root targetName packageName filename )

   #Link the vnv library
   if (${ARGC} GREATER 3 )
      target_link_libraries(${targetName} PRIVATE Injection::FInjection)
      add_vnv_generation_target( ${packageName} ${filename} ${CMAKE_BINARY_DIR}/vnv_cache.__cache__  ${ARGN} )
   
   else() 
   
     if (NOT ${targetName}  MATCHES "^injection$" )
      target_link_libraries(${targetName} PRIVATE Injection::Injection)
     endif()

     message("Adding Generation Targets for ${packageName}" )
     add_vnv_generation_target( ${packageName} ${filename} ${CMAKE_BINARY_DIR}/vnv_cache.__cache__  )
      
   endif()

endfunction()


# This one adds all the targets but makes it up to you to add the source. 
function(link_vnv_file_semi targetName packageName filename )
   
   link_vnv_file_root(${ARGV})

   #Add the file as a source
   target_sources( ${targetName} PRIVATE ${filename} )
   set_source_files_properties( ${filename} PROPERTIES COMPILE_DEFINITIONS VNV_IGNORE=0)
  
   if (${ARGC} GREATER 3)
       target_sources( ${targetName} PRIVATE ${ARGN} )
       set_source_files_properties( ${ARGN} PROPERTIES COMPILE_DEFINITIONS VNV_IGNORE=0)
   endif()
   
endfunction()


function(link_vnv_file_fortran targetName packageName extension)
   link_vnv_file_semi(${targetName} ${packageName} ${CMAKE_BINARY_DIR}/vnv_registration_${packageName}.${extension} ${CMAKE_BINARY_DIR}/vnv_registration_${packageName}.f90)
   add_dependencies(${targetName} vnv_gen_${packageName})   
endfunction()




function(link_vnv_file targetName packageName extension)
  link_vnv_file_semi(${targetName} ${packageName} ${CMAKE_BINARY_DIR}/vnv_registration_${packageName}.${extension})
  add_dependencies(${targetName} vnv_gen_${packageName})      
endfunction()


endif()






