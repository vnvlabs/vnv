### MACRO TO BUILD THE REGISTRATION CPP FILE DYNAMICALLY
option(WITH_EXTRACTION "Use extraction to generate Registration files" ON)
set(VNV_OUT_DIR "${CMAKE_BINARY_DIR}/registration" CACHE PATH "Output Directory for Registration files")
set(VNV_OUT_PREFIX "Registration" CACHE STRING "VNV Registration file prefix")
set(VNV_OUT_EXT "c" CACHE STRING "VNV Registration Ouput file extension" )
set(VNV_COMPILE_COMMANDS "${CMAKE_BINARY_DIR}/compile_commands.json" CACHE FILEPATH "Compile Commands file")
set(VNV_DIST_PATH "${CMAKE_SOURCE_DIR}/registration/" CACHE PATH "Directory to save registraiton cache files to")

set(VNV_C_COMPILER @CMAKE_C_COMPILER@)
set(VNV_C_COMPILER_VERSION @CMAKE_C_COMPILER_VERSION@)
set(VNV_CXX_COMPILER @CMAKE_CXX_COMPILER@)
set(VNV_CXX_COMPILER_VERSION @CMAKE_CXX_COMPILER_VERSION@)
set(VNV_MPI_C_COMPILER @MPI_C_COMPILER@)
set(VNV_MPI_C_VERSION @MPI_C_VERSION@)
set(VNV_MPI_CXX_COMPILER @MPI_CXX_COMPILER@)
set(VNV_MPI_CXX_VERSION @MPI_CXX_VERSION@)


if(WITH_EXTRACTION AND TARGET Injection::Extraction)


### Command should always run. 
add_custom_target(
   
   vnv_generate_cache
   COMMAND Injection::Extraction 
          --cache-only 
          --cache ${CMAKE_BINARY_DIR}/vnv.__cache__ 
          --fix-omp
          ${CMAKE_BINARY_DIR}/compile_commands.json          
   BYPRODUCTS ${CMAKE_BINARY_DIR}/vnv.__cache__        
   COMMENT "Updating the VnV Cache File"
   )


#TODO targetFile is wrong -- Need to figure out a way to get the file name 
# of the target output binary. 
function( add_vnv_generation_target targetName packageName extension fortran ) 
    
   if (${fortran} GREATER 0 ) 
      set(fortranFile ${CMAKE_BINARY_DIR}/vnv_${packageName}.f90)
      set(fortranFiles --fortran ${CMAKE_BINARY_DIR}/vnv_${packageName}.f90 )
   endif()

   add_custom_target(vnv_gen_${packageName}
        COMMAND Injection::Extraction 
               --output-only
               --output ${CMAKE_BINARY_DIR}/vnv_${packageName}.${extension} 
               --cache ${CMAKE_BINARY_DIR}/vnv.__cache__ 
               --package ${packageName} 
               --targetFile ${CMAKE_CURRENT_BINARY_DIR}/${targetName} 
               --regFile ${CMAKE_BINARY_DIR}/vnv.__registration__ 
               ${fortranFiles}
               ${CMAKE_BINARY_DIR}/compile_commands.json
         DEPENDS vnv_generate_cache
         BYPRODUCTS ${CMAKE_BINARY_DIR}/vnv_${packageName}.${extension} ${fortranFile}
         COMMENT "Generating the vnv registration file for ${targetName}." 
   )
      
endfunction()


# This one adds all the targets but makes it up to you 
function(link_vnv_file_root targetName packageName extension fortran )

   #Link the vnv library
   if (${fortran} GREATER 0 )
      target_link_libraries(${targetName} PRIVATE Injection::FInjection)
   else() 
   
     if (NOT ${targetName}  MATCHES "^injection$" )
         target_link_libraries(${targetName} PRIVATE Injection::Injection)
     endif()
   
   endif()
   add_vnv_generation_target( ${targetName} ${packageName} ${extension} ${fortran}  )


endfunction()


# This one adds all the targets but makes it up to you to add the source. 
function(link_vnv_file_semi targetName packageName extension fortran )
   
   link_vnv_file_root(${ARGV})

   #Add the file as a source
   target_sources( ${targetName} PRIVATE ${CMAKE_BINARY_DIR}/vnv_${packageName}.${extension} )
   set_source_files_properties( ${CMAKE_BINARY_DIR}/vnv_${packageName}.${extension} PROPERTIES COMPILE_DEFINITIONS VNV_IGNORE=0)
  
   if (${fortran} GREATER 0)
       target_sources( ${targetName} PRIVATE ${CMAKE_BINARY_DIR}/vnv_${packageName}.f90 )
       set_source_files_properties( ${CMAKE_BINARY_DIR}/vnv_${packageName}.f90 PROPERTIES COMPILE_DEFINITIONS VNV_IGNORE=0)
   endif()

   
   
endfunction()


function(link_vnv_file_fortran targetName packageName extension)
   link_vnv_file_semi(${targetName} ${packageName} ${extension} 1)
endfunction()


function(link_vnv_file targetName packageName extension)
  link_vnv_file_semi(${targetName} ${packageName} ${extension} 0)
endfunction()


endif()






