This is the very humble beginings of a VnV Input file GUI
 
To run the gui.

    npm install 
    python3 -m http.server


I am thinking two components for a GUI

1. Input file editor: The input file editor will support autocomplete, 
   templates and validation. jsoneditor, one of the dependencies of this
   project, supports all of this when provided a json schema. It provides
   a tree view, code view and text view for editing the json file, with autocomplete
   included ( through ajv...)


# Defining the Schema

The toolkit is built around json schema validation.
  - Every input file is validated against json schema
  - Optional configuration blocks are validated
  - Test Specifications are validated. 

We need to add a function to the toolkit called generateSchema(). An option called 
dumpSchema (and quit?) should be included in the input file. 

When dumpSchema is true, we should generate a full schema for the given application. This
means we should fully initialize the VnV toolkit, then dump the schema, clean up and, if the 
user requests it, quit. 

To generate a full schema, we will need to know the all the vnv plugins that should be included
when validating. The executable will also need to be in a runnable state (seems reasonable). 

The only tricky part to all this will be mapping injection point parameters to test parameters. Basically
we need to define a schema that says which transformations are valid. 

The GUI will need to provide the user with a place to upload the schema: ( we could also run it for them, assuming
the GUI is running on localhost? 

Once, we have that, we can input it into the Jsoneditor command and we should have full autocomplete, validation 
at templates... pretty cool

2. JMES Tester

One of the parts of the code is that it allows users to access data using jmespath. This is a really powerfull
query language, but will be new to most of our users. A gui that allows users to upload a vnv-output file and 
test jmespath queries would be great.

I envisage a JSON tree on one side and a jmespath editor on the other side. The node currently selected in the tree 
is the "@" node. Users then write a jmes query in the editor, and see the result in the preview


3. Comment tester/editor:

Same as above, but we have a text area for writing "comments". The preview section will 
show the final output live. In this case, users will need to upload a vnv-output file, same as above

4. Report Editor: This one is a waaay strech goal -- Have a way for users to control report structure. 
This would produce a file passed to the generator to control how reports are generated. Things like removing 
certain sections, adding custom text, making changes etc. could be supported.




